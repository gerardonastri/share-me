import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import styles from '../styles/Home.module.css'
import React, { useEffect, useRef, useState } from 'react'
import {useSession} from 'next-auth/react'
import { useRouter } from 'next/router'
import Navbar from '../components/Navbar'
import Sidebar from '../components/Sidebar'
import {HiMenu} from 'react-icons/hi'
import { AiFillCloseCircle } from 'react-icons/ai';
import { AiOutlineCloudUpload } from 'react-icons/ai';
import {axiosReq} from '../util/apiCalls'
import { getSession } from "next-auth/react";
import storage from '../util/firebase';
import {categories} from '../util/data'


function Create({user}) {
  //const {data: session} = useSession()
  const router = useRouter()
  const [toggleSidebar, setToggleSidebar] = useState(false)
  const [profile, setProfile] = useState({})
  const [searchTerm, setSearchTerm] = useState('')
  //pin fields
  const [title, setTitle] = useState('')
  const [about, setAbout] = useState('')
  const [destination, setDestination] = useState('')
  const [image, setImage] = useState('')
  const [category, setCategory] = useState('')
  const scrollRef = useRef(null)
  
  useEffect(() => {
    const pushUser = async () => {
      if(!user){
        router.push('/login')
      }
      try {
        const res = await axiosReq.get(`user?user=${user.name}`)
        setProfile(res.data)
      } catch (error) {
        console.log(error);
      }
    }
    pushUser()
  }, [])  
  useEffect(() => {
    scrollRef.current.scrollTo(0, 0)
  }, [])  

  const createPin = async () => {
    const fileData = await storage.ref(`items/${image.name}`).put(image)
    const imageSrc = await fileData.ref.getDownloadURL()
        try {
          const res = await axiosReq.post('create', {
            author: profile._id,
            image: imageSrc,
            about,
            destination,
            category,
            title
          })
          router.push('/')
        } catch (error) {
          console.log(error);
        }
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Share Me</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className=' w-full flex bg-gray-50 md:flex-row flex-col h-screen transition-height duration-75 ease-out'>
        <div className='hidden md:flex h-screen flex-initial'>
          <Sidebar user={profile && profile} />
        </div>
        <div className='flex md:hidden flex-row justify-between items-center shadow-md'>
          <HiMenu fontSize={40} className="cursor-pointer" onClick={() => setToggleSidebar(true)} />
          <Link passHref href="/">
            <img src="/logo.png" className='w-28' />
          </Link>
          <Link passHref href={`/profile/${profile._id}`}>
          <img src={user.image}  className='w-12 h-12 py-2 mr-2 rounded-full'  />
          </Link>
        </div>
        {toggleSidebar && (
          <div className='fixed w-4/5 bg-white h-screen overflow-y-auto shadow-md z-10 animate-slide-in'>
            <div className='absolute w-full flex justify-end items-center p-2'>
              <AiFillCloseCircle fontSize={30} className="cursor-pointer" onClick={() => setToggleSidebar(false)} />
            </div>
            <Sidebar user={profile && profile} closeToggle={setToggleSidebar} />
          </div>
        )}
        <div className='pb-2 flex-1 h-screen overflow-y-scroll' ref={scrollRef}>
            <Navbar searchTerm={searchTerm} setSearchTerm={setSearchTerm} user={profile} />
            <div className="flex flex-col justify-center items-center">
              <div className="flex lg:flex-row flex-col justify-center items-center bg-white lg:p-5 lg:w-4/5 w-full">
                <div className="bg-secondaryColor p-3 flex flex-0.7 w-full">
                  <div className="flex justify-center items-center flex-col border-2 border-dotted border-gray-300 p-3 w-full h-64">

                    <label className='cursor-pointer'>
                      <div className="flex flex-col items-center justify-center h-full">
                        <div className="flex flex-col justify-center items-center">
                          <p className="font-bold text-2xl">
                            <AiOutlineCloudUpload />
                          </p>
                          <p className="text-lg">Click to upload</p>
                        </div>
                        <p className='mt-14 text-gray-400'>
                         use high-quality JIPG, SVG, PNG, GIF less than 20 MB
                      </p>
                      </div>
                      <input type="file" name='upload-image' onChange={(e) => setImage(e.target.files[0])} style={{display: 'none'}} />
                    </label>

                  </div>
                </div>
              </div>
              <div className="flex flex-1 flex-col gap-6 lg:pl-5 mt-5 w-full">
                <input type="text" name="" value={title} onChange={(e) => setTitle(e.target.value)} placeholder="Add your title here" className='outline-none text-2xl sm:text-3xl font-bold border-b-2 border-gray-200 p-2' />
                {user && (
                  <div className="flex gap-2 p-2 my-2 items-center bg-white rounded-lg">
                    <img src={profile.img} className="w-10 h-10 rounded-full" alt="user-img" />
                    <p className='font-bold'>{profile.username}</p>
                  </div>
                )}
                <input type="text" name="" value={about} onChange={(e) => setAbout(e.target.value)} placeholder="What is your pin about" className='outline-none text-base sm:text-large border-b-2 border-gray-200 p-2' />
                <input type="text" name="" value={destination} onChange={(e) => setDestination(e.target.value)} placeholder="Add a destination link" className='outline-none text-base sm:text-large border-b-2 border-gray-200 p-2' />
                <div className="flex flex-col">
                  <div>
                    <p className="mb-2 font-semibold text-lg sm:text-cl">Choose pin category</p>
                    <select name="" onChange={(e) => setCategory(e.target.value)} className="outline-none w-4/5 text-base border-b-2 border-gray-200 p-2 rounded-md cursor-pointer">
                      <option value="other" className='bg-white'>Select Category</option>
                      {categories.map((category) => (
                        <option value={category.name} className='text-base border-0 outline-none capitalize bg-white text-blac'>{category.name}</option>
                      ))}
                    </select>
                  </div>
                  <div className='flex justify-end items-end mt-5'>
                    <button className='bg-red-500 text-white font-bold p-2 rounded-full w-28 outline-none' onClick={createPin}>Save Pin</button>
                  </div>
                </div>
              </div>
            </div>
        </div>
      </div>
    </div>
  )
}

export async function getServerSideProps(context) {
  const session = await getSession(context);
  if (!session) {
    context.res.writeHead(302, { Location: "/" });
    context.res.end();
    return {};
  }
  return {
    props: {
      user: session.user,
    },
  };
}

export default Create;