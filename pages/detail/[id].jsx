import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import React, { useEffect, useRef, useState } from 'react'
import {useSession} from 'next-auth/react'
import { useRouter } from 'next/router'
import Navbar from '../../components/Navbar'
import Sidebar from '../../components/Sidebar'
import {HiMenu} from 'react-icons/hi'
import { AiFillCloseCircle } from 'react-icons/ai';
import {axiosReq} from '../../util/apiCalls'
import { getSession } from "next-auth/react";
import {MdDownloadForoffline} from 'react-icons/md'
import {v4 as uuidv4} from 'uuid'
import PinDetail from '../../components/PinDetail'


function Detail({user}) {
  //const {data: session} = useSession()
  const router = useRouter()
  const [toggleSidebar, setToggleSidebar] = useState(false)
  const [profile, setProfile] = useState({})
  const [searchTerm, setSearchTerm] = useState('')
  const scrollRef = useRef(null);
  const [pin, setPin] = useState(null)
  
  useEffect(() => {
    const pushUser = async () => {
      if(!user){
        router.push('/login')
      }
      try {
        const res = await axiosReq.get(`user?user=${user.name}`)
        setProfile(res.data)
      } catch (error) {
        console.log(error);
      }
    }
    pushUser()
  }, [])  
  useEffect(() => {
    const pushUser = async () => {
      try {
        const id = location.pathname.split('/')[2]
        const res = await axiosReq.get(`pin?id=${id}`)
        setPin(res.data)
      } catch (error) {
        console.log(error);
      }
    }
    pushUser()
  }, []) 
  useEffect(() => {
    scrollRef.current.scrollTo(0, 0)
  }, [])  
  
  return (
    <div>
      <Head>
        <title>Share Me</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className=' w-full flex bg-gray-50 md:flex-row flex-col h-screen transition-height duration-75 ease-out'>
        <div className='hidden md:flex h-screen flex-initial'>
          <Sidebar user={profile && profile} />
        </div>
        <div className='flex md:hidden flex-row justify-between items-center shadow-md'>
          <HiMenu fontSize={40} className="cursor-pointer" onClick={() => setToggleSidebar(true)} />
          <Link passHref href="/">
            <img src="/logo.png" className='w-28' />
          </Link>
          <Link passHref href={`/profile/${profile._id}`}>
          <img src={user.image}  className='w-12 h-12 py-2 mr-2 rounded-full'  />
          </Link>
        </div>
        {toggleSidebar && (
          <div className='fixed w-4/5 bg-white h-screen overflow-y-auto shadow-md z-10 animate-slide-in'>
            <div className='absolute w-full flex justify-end items-center p-2'>
              <AiFillCloseCircle fontSize={30} className="cursor-pointer" onClick={() => setToggleSidebar(false)} />
            </div>
            <Sidebar user={profile && profile} closeToggle={setToggleSidebar} />
          </div>
        )}
        <div className='pb-2 flex-1 h-screen overflow-y-scroll' ref={scrollRef}>
          <Navbar searchTerm={searchTerm} setSearchTerm={setSearchTerm} user={profile} />
            {pin && <PinDetail pin={pin} user={profile} />}
        </div>
      </div>
    </div>
  )
}

export async function getServerSideProps(context) {
  const session = await getSession(context);
  if (!session) {
    context.res.writeHead(302, { Location: "/" });
    context.res.end();
    return {};
  }
  return {
    props: {
      user: session.user,
    },
  };
}

export default Detail;